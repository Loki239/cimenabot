"""
Search Handler Module for CinemaBot

This module handles the main search functionality, including processing
user queries, fetching movie data, and displaying results with streaming links.
"""

import os
import html
import random
import logging
import aiohttp
import asyncio
from typing import List, Dict, Any, Optional, Union
from PIL import Image, ImageDraw, ImageFont
from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode

from database import Database
from utils.api import search_rutube_api, get_kinopoisk_data
from utils.cache import (
    get_movie_from_cache, save_movie_to_cache,
    get_cached_poster_path, save_poster_to_cache,
    CACHE_DIR, POSTERS_DIR, MOVIE_DATA_CACHE, RUTUBE_CACHE
)
from utils.helpers import separator, rating_stars, is_command_without_slash
from handlers.commands import get_search_settings

router = Router()
db = Database()

async def send_loading_message(message: Message) -> Message:
    """Send a loading message when search starts"""
    return await message.answer("üîç <i>–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</i>", parse_mode=ParseMode.HTML)

@router.message()
async def handle_message(message: Message, bot: Bot, db: Optional[Database] = None):
    """
    Handle regular text messages and search for movies.
    
    This is the main handler that processes user's search queries
    and returns movie information with streaming links.
    
    Args:
        message: The message object from Telegram
        bot: The bot instance
        db: Database instance (injected by middleware)
    """
    # Use global database if middleware didn't provide one
    if db is None:
        db = Database()
        
    # Fix: safely get message text and check if it's None
    message_text = message.text
    if message_text is None:
        return
        
    # Clean and trim the query
    query = message_text.strip()
    
    # Don't process empty messages
    if not query:
        return
        
    # Check if message looks like a command without slash
    if is_command_without_slash(query):
        await message.answer(f"–ü–æ—Ö–æ–∂–µ, –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É, –Ω–æ –∑–∞–±—ã–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ—à (/). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /{query}")
        return
    
    # Fix: Check if user is None
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
        
    # Get user ID
    user_id = message.from_user.id
        
    # Log the search
    logging.info(f"–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # Add to search history
    await db.add_search(user_id, query)
    
    # Create and send a "loading" message
    loading_msg = await message.answer("üîç <b>–ò—â—É —Ñ–∏–ª—å–º...</b>", parse_mode=ParseMode.HTML)
    
    # Get current search settings
    settings = get_search_settings()
    links_on = settings['links_on']
    kp_on = settings['kp_on']

    if not links_on and not kp_on:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –æ—Ç {user_id}")
        response = (
            f"üîé <b>–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>\n"
            f"{separator()}"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫:\n"
            f"/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
            f"/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ö–∏–Ω–æ–ø–æ–∏—Å–∫"
        )
        await message.answer(response, parse_mode=ParseMode.HTML)
        return

    tasks = []
    if kp_on:
        tasks.append(asyncio.create_task(get_kinopoisk_data(query)))
    if links_on: # Rutube links
        tasks.append(asyncio.create_task(search_rutube_api(query)))

    kinopoisk_data = None
    video_links = [] # –¢–æ–ª—å–∫–æ –¥–ª—è Rutube

    if tasks:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        task_results = await asyncio.gather(*tasks, return_exceptions=True)
        for res_item in task_results:
            if isinstance(res_item, Exception):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {res_item}")
            elif isinstance(res_item, dict) and "kinopoiskId" in res_item: # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
                kinopoisk_data = res_item
            elif isinstance(res_item, list): # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Rutube
                video_links.extend(res_item)

        from_cache = ""
        if kinopoisk_data and "cache_source" in kinopoisk_data:
            from_cache = " (–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞)"
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞{from_cache}: {'–î–∞' if kinopoisk_data else '–ù–µ—Ç'}")
        
        from_cache = ""
        if len(video_links) > 0 and hasattr(video_links[0], "cache_source"):
            from_cache = " (–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞)"
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏ (Rutube){from_cache}: {len(video_links)}")
    else:
        logging.info("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å.")

    response_parts = []
    image_url = None

    if kinopoisk_data:
        await db.add_movie(user_id, kinopoisk_data.get("nameRu", query), kinopoisk_data.get("year"), kinopoisk_data.get("description"))
        title = kinopoisk_data.get("nameRu", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        year = kinopoisk_data.get("year", "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        description = kinopoisk_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        rating_kp = kinopoisk_data.get("ratingKinopoisk")
        genres = ", ".join([g["genre"] for g in kinopoisk_data.get("genres", [])])
        countries = ", ".join([c["country"] for c in kinopoisk_data.get("countries", [])])
        film_length = kinopoisk_data.get("filmLength", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        response_parts.append(f"üé¨ <b>{html.escape(title)} ({year})</b>")
        response_parts.append(f"<b>–ñ–∞–Ω—Ä:</b> {html.escape(genres)}")
        response_parts.append(f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {html.escape(countries)}")
        if film_length and film_length > 0:
            response_parts.append(f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {film_length} –º–∏–Ω.")
        if rating_kp:
            response_parts.append(f"<b>–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞:</b> {rating_kp} {rating_stars(rating_kp)}")
        response_parts.append(separator())
        response_parts.append(f"<i>{html.escape(description)}</i>")
        
        image_url = kinopoisk_data.get("posterUrlPreview")

    if links_on and not video_links and not kinopoisk_data: # –ï—Å–ª–∏ –∏—Å–∫–∞–ª–∏ —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ (–¥–∞–∂–µ –∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å–º–µ)
        response_parts.append(f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{html.escape(query)}</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ, –Ω–∏ –Ω–∞ Rutube.")
    elif links_on and not video_links and kinopoisk_data: # –ï—Å–ª–∏ –∏–Ω—Ñ–æ –µ—Å—Ç—å, –Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç
        response_parts.append(separator("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"))
        response_parts.append("‚Ñπ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ Rutube –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    elif video_links: # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –µ—Å—Ç—å
        response_parts.append(separator("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä (Rutube)"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫
        for i, link_info in enumerate(video_links[:5], 1): # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Å—ã–ª–æ–∫
            name = link_info['name']
            url = link_info['url']
            
            # Ensure URL is properly formatted
            if not url.startswith('http'):
                url = 'https://' + url
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
            response_parts.append(f"{i}. <a href='{url}'>{html.escape(name)}</a>")
            
            # Log for debugging
            from_cache = link_info.get('from_cache', False)
            cache_status = "–∏–∑ –∫—ç—à–∞" if from_cache else "–∏–∑ –ø–æ–∏—Å–∫–∞"
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ {i}: {name} ({cache_status})")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –∫–Ω–æ–ø–∫–∏)
        rutube_keyboard = None
    else:
        rutube_keyboard = None

    if not kinopoisk_data and not links_on: # –ï—Å–ª–∏ –ö–ü –≤—ã–∫–ª—é—á–µ–Ω –∏ —Å—Å—ã–ª–∫–∏ —Ç–æ–∂–µ (—Ö–æ—Ç—è —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ)
        response_parts.append("üòî –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ /settings.")
    elif not kinopoisk_data and not video_links and not links_on: # –ö–ü –≤—ã–∫–ª—é—á–µ–Ω, —Å—Å—ã–ª–æ–∫ –Ω–µ –∏—Å–∫–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, links_on –±—ã–ª false –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
        response_parts.append("üòî –ü–æ–∏—Å–∫ –ø–æ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É –æ—Ç–∫–ª—é—á–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ Rutube —Ç–∞–∫–∂–µ –Ω–µ—Ç –∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–º –æ—Ç–∫–ª—é—á–µ–Ω.")

    final_response = "\n".join(response_parts)

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
    if image_url:
        poster_paths = []
        poster_loaded = False
        random_filename = f"poster_{random.randint(1000, 9999)}.jpg"
        
        # First check for cached poster
        cached_poster = None
        if kinopoisk_data and kinopoisk_data.get("kinopoiskId"):
            movie_id = kinopoisk_data.get("kinopoiskId")
            cached_poster = get_cached_poster_path(movie_id)
        
        if cached_poster and kinopoisk_data is not None:
            poster_paths.append(cached_poster)
            poster_loaded = True
            logging.info(f"Using cached poster for movie: {kinopoisk_data.get('nameRu', 'Unknown')}")
        else:
            # Regular poster download logic
            try:
                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–µ—Ä: {image_url}")
                async with aiohttp.ClientSession() as session:
                    # Fix timeout parameter to use ClientTimeout object
                    timeout = aiohttp.ClientTimeout(total=10)
                    async with session.get(image_url, timeout=timeout) as resp:
                        if resp.status == 200:
                            poster_data = await resp.read()
                            
                            # If we have movie ID, save to cache
                            if kinopoisk_data and kinopoisk_data.get("kinopoiskId"):
                                movie_id = kinopoisk_data.get("kinopoiskId")
                                cached_path = save_poster_to_cache(movie_id, poster_data)
                                if cached_path:
                                    poster_paths.append(cached_path)
                                    poster_loaded = True
                                    logging.info(f"Poster saved to cache and loaded for movie ID: {movie_id}")
                                else:
                                    # Fallback to temporary file if caching fails
                                    with open(random_filename, "wb") as f:
                                        f.write(poster_data)
                                    poster_paths.append(random_filename)
                                    poster_loaded = True
                            else:
                                # No movie ID, use temporary file
                                with open(random_filename, "wb") as f:
                                    f.write(poster_data)
                                poster_paths.append(random_filename)
                                poster_loaded = True
                            
                            logging.info(f"–ü–æ—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {image_url}")
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å: {resp.status}, URL: {image_url}")
            except asyncio.TimeoutError:
                logging.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–µ—Ä–∞ (15 —Å–µ–∫): {image_url}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–µ—Ä–∞ {image_url}: {str(e)}")

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if not poster_loaded:
            # Fix: Check if kinopoisk_data is None
            movie_title = "–§–∏–ª—å–º"
            movie_year = ""
            if kinopoisk_data is not None:
                movie_title = kinopoisk_data.get("nameRu", "–§–∏–ª—å–º")
                movie_year = str(kinopoisk_data.get("year", ""))
                
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä –¥–ª—è '{movie_title}', —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç–µ—Ä–∞ - —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
                img = Image.new('RGB', (500, 750), color=(15, 30, 60))
                draw = ImageDraw.Draw(img)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≥–æ–¥ —Ñ–∏–ª—å–º–∞
                logging.info(f"–°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä –¥–ª—è: '{movie_title}' ({movie_year})")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω (–æ—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –¥–æ —á–µ—Ä–Ω–æ–≥–æ)
                for y in range(750):
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
                    color_value = max(0, 15 - int(y / 750 * 15))
                    color_value2 = max(0, 30 - int(y / 750 * 30))
                    draw.line([(0, y), (500, y)], fill=(color_value, color_value2, color_value * 4))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–ª–µ–º—É –∫–∏–Ω–æ–ø–ª–µ–Ω–∫–∏ –≤–≤–µ—Ä—Ö—É
                draw.rectangle([(50, 50), (450, 100)], fill=(20, 40, 80), outline=(255, 255, 255), width=2)
                
                # –†–∏—Å—É–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –ø–ª–µ–Ω–∫–∏
                for x in range(70, 450, 40):
                    draw.rectangle([(x, 60), (x+20, 90)], fill=(40, 60, 100))
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                text_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
                
                try:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    title_lines: List[str] = []
                    if len(movie_title) > 20:
                        words = movie_title.split()
                        current_line: List[str] = []
                        for word in words:
                            current_line.append(word)
                            if len(' '.join(current_line)) > 20:
                                if len(current_line) > 1:
                                    current_line.pop()  # Remove last word that made it too long
                                    title_lines.append(' '.join(current_line))
                                    current_line = [word]
                                else:
                                    title_lines.append(' '.join(current_line))
                                    current_line = []
                        if current_line:  # Add any remaining words
                            title_lines.append(' '.join(current_line))
                    else:
                        title_lines = [movie_title]
                    
                    # –†–∏—Å—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
                    y_position = 250
                    # Fix: Create font object for text drawing
                    # Note: This is placeholder code since we don't have access to the actual font file
                    # In a real environment, you'd use a font like:
                    # font = ImageFont.truetype("path/to/font.ttf", size=20)
                    # For default system font:
                    font = None
                    try:
                        font = ImageFont.load_default()
                    except:
                        pass
                    
                    for line in title_lines:
                        # Fix: Add font parameter to draw.text
                        draw.text((250, y_position), line, fill=text_color, anchor="mm", font=font)
                        y_position += 40
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
                    if movie_year:
                        # Fix: Add font parameter to draw.text
                        draw.text((250, y_position + 20), movie_year, fill=(200, 200, 200), anchor="mm", font=font)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
                    # –ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –µ—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                    draw.text((250, 250), movie_title[:20], fill=text_color, anchor="mm", font=font)
                    if len(movie_title) > 20:
                        draw.text((250, 290), movie_title[20:40], fill=text_color, anchor="mm", font=font)
                    if movie_year:
                        draw.text((250, 330), movie_year, fill=(200, 200, 200), anchor="mm", font=font)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ" –≤–Ω–∏–∑—É
                draw.text((250, 650), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ", fill=(180, 180, 180), anchor="mm", font=font)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä
                img.save(random_filename)
                poster_paths.append(random_filename)
                poster_loaded = True
                logging.info(f"–°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä –¥–ª—è '{movie_title}'")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–µ—Ä–∞: {str(e)}")
                # –î–∞–∂–µ —Å —ç—Ç–æ–π –æ—à–∏–±–∫–æ–π –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç–µ—Ä
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Å—Ç–µ—Ä —Å —Ñ–æ–Ω–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º "–§–∏–ª—å–º"
                    img = Image.new('RGB', (500, 750), color=(15, 30, 60))
                    draw = ImageDraw.Draw(img)
                    # Get default font
                    font = None
                    try:
                        font = ImageFont.load_default()
                    except:
                        pass
                    draw.text((250, 375), "–§–∏–ª—å–º", fill=(255, 255, 255), anchor="mm", font=font)
                    img.save(random_filename)
                    poster_paths.append(random_filename)
                    poster_loaded = True
                    logging.info("–°–æ–∑–¥–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–æ—Å—Ç–µ—Ä")
                except Exception as e2:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–æ—Å—Ç–µ—Ä: {str(e2)}")

        if poster_loaded and poster_paths:
            try:
                await loading_msg.delete()
                if len(final_response) > 1000:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    movie_name = "–§–∏–ª—å–º"
                    if kinopoisk_data is not None:
                        movie_name = kinopoisk_data.get("nameRu", "–§–∏–ª—å–º")
                    short_caption = f"üé¨ <b>{movie_name}</b>"
                    await message.answer_photo(
                        photo=FSInputFile(poster_paths[0]),
                        caption=short_caption,
                        parse_mode=ParseMode.HTML
                    )
                    await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                        disable_web_page_preview=False)
                else:
                    await message.answer_photo(
                        photo=FSInputFile(poster_paths[0]),
                        caption=final_response,
                        parse_mode=ParseMode.HTML
                    )
                logging.info("–ü–æ—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                await loading_msg.delete()  # –£–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                    disable_web_page_preview=False)
            finally:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –Ω–æ –ù–ï –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ—Ä—ã
                for path in poster_paths:
                    if os.path.exists(path):
                        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if os.path.dirname(path) != POSTERS_DIR:
                            try:
                                os.remove(path)
                                logging.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–µ—Ä–∞: {path}")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {path}: {e}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–µ—Ä")
            await loading_msg.delete()
            await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                disable_web_page_preview=False)
    elif final_response:
        await loading_msg.delete()
        await message.answer(final_response, parse_mode=ParseMode.HTML, 
                            disable_web_page_preview=False)
    else:
        await loading_msg.delete()
        await message.answer(f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å <b>{html.escape(query)}</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML) 
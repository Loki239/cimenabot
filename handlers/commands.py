"""
Command Handlers Module for CinemaBot

This module contains all the command handlers for the Telegram bot,
including basic commands like /start and /help, as well as settings
commands like /turn_links and /turn_kp.
"""

import logging
import html
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils.formatting import Text
from aiogram.enums import ParseMode
from typing import Optional, Dict, Any

from utils.helpers import separator, get_source_status
from utils.cache import clear_cache, clear_posters, clear_movie_data, clear_rutube
from database import Database

router = Router()

# Global variables for settings (will be moved to config in the future)
LINKS_ON = True  # This refers to Rutube search
KP_ON = True

# Admin IDs with permission to execute admin commands
ADMIN_IDS = [1601735530]  # Add admin user IDs here

def get_search_settings() -> Dict[str, Any]:
    """Return current search settings as a dictionary"""
    return {
        'links_on': LINKS_ON,
        'kp_on': KP_ON
    }

def is_admin(message: Message) -> bool:
    """Check if the user has admin privileges"""
    # Check if user exists
    if message.from_user is None:
        return False
        
    user_id = message.from_user.id
    
    # Check if user ID is in admin list
    if user_id in ADMIN_IDS:
        return True
        
    # Check if chat ID is in admin list
    if message.chat is not None and message.chat.id in ADMIN_IDS:
        return True
        
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: Message):
    """Handle /start command - send welcome message"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    welcome_message = (
        "üçø <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CinemaBot!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö, –∞ —Ç–∞–∫–∂–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞"
    )
    
    await message.answer(welcome_message, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def send_help(message: Message):
    """Handle /help command - show available commands"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    help_message = (
        "üé¨ <b>–ö–æ–º–∞–Ω–¥—ã CinemaBot:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/turn_links - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
        "/turn_kp - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    )
    
    # Add admin commands if user is admin
    if is_admin(message):
        help_message += (
            "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à\n"
            "/clear_posters - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤\n"
            "/clear_movie_data - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
            "/clear_rutube - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å—Å—ã–ª–æ–∫ Rutube\n"
        )
    
    help_message += (
        "\n<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫–∏"
    )
    
    await message.answer(help_message, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@router.message(Command("turn_links"))
async def toggle_links(message: Message):
    """Toggle Rutube links search on/off"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    global LINKS_ON
    LINKS_ON = not LINKS_ON
    
    user_id = message.from_user.id
    logging.info("–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", "–≤–∫–ª—é—á–µ–Ω" if LINKS_ON else "–≤—ã–∫–ª—é—á–µ–Ω", user_id)
    
    status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if LINKS_ON else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
    await message.answer(f"–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ Rutube {status}", parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@router.message(Command("turn_kp"))
async def toggle_kp(message: Message):
    """Toggle Kinopoisk search on/off"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    global KP_ON
    KP_ON = not KP_ON
    
    user_id = message.from_user.id
    logging.info("–ü–æ–∏—Å–∫ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", "–≤–∫–ª—é—á–µ–Ω" if KP_ON else "–≤—ã–∫–ª—é—á–µ–Ω", user_id)
    
    status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if KP_ON else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
    await message.answer(f"–ü–æ–∏—Å–∫ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ {status}", parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@router.message(Command("settings"))
async def show_settings(message: Message):
    """Handle /settings command - show current settings"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    global LINKS_ON, KP_ON
    
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /settings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:</b>\n\n"
        f"{get_source_status(LINKS_ON, KP_ON)}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /turn_links –∏ /turn_kp –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    
    await message.answer(settings_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
@router.message(Command("clear_cache"))
async def handle_clear_cache(message: Message):
    """Handle /clear_cache command - clear all cache"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
        
    # Check admin privileges
    if not is_admin(message):
        user_id = message.from_user.id
        logging.warning(f"Unauthorized attempt to clear cache by user {user_id}")
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        return
    
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /clear_cache –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    try:
        # Make sure to await the async function
        cleared = await clear_cache()
        await message.answer(f"‚úÖ –í–µ—Å—å –∫—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {cleared} —Ñ–∞–π–ª–æ–≤.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@router.message(Command("clear_posters"))
async def handle_clear_posters(message: Message):
    """Handle /clear_posters command - clear posters cache"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
    
    # Check admin privileges
    if not is_admin(message):
        user_id = message.from_user.id
        logging.warning(f"Unauthorized attempt to clear posters cache by user {user_id}")
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        return
        
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /clear_posters –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    try:
        # Make sure to await the async function
        cleared = await clear_posters()
        await message.answer(f"‚úÖ –ö—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {cleared} —Ñ–∞–π–ª–æ–≤.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@router.message(Command("clear_movie_data"))
async def handle_clear_movie_data(message: Message):
    """Handle /clear_movie_data command - clear movie data cache"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
    
    # Check admin privileges
    if not is_admin(message):
        user_id = message.from_user.id
        logging.warning(f"Unauthorized attempt to clear movie data cache by user {user_id}")
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        return
        
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /clear_movie_data –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    try:
        # Make sure to await the async function
        cleared = await clear_movie_data()
        await message.answer(f"‚úÖ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {cleared} –∑–∞–ø–∏—Å–µ–π.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@router.message(Command("clear_rutube"))
async def handle_clear_rutube(message: Message):
    """Handle /clear_rutube command - clear Rutube links cache"""
    # Check if user exists
    if message.from_user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disable_web_page_preview=True)
        return
    
    # Check admin privileges
    if not is_admin(message):
        user_id = message.from_user.id
        logging.warning(f"Unauthorized attempt to clear Rutube cache by user {user_id}")
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        return
        
    user_id = message.from_user.id
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /clear_rutube –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    
    try:
        # Make sure to await the async function
        cleared = await clear_rutube()
        await message.answer(f"‚úÖ –ö—ç—à —Å—Å—ã–ª–æ–∫ Rutube —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {cleared} –∑–∞–ø–∏—Å–µ–π.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ Rutube: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ Rutube. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", parse_mode=ParseMode.HTML, disable_web_page_preview=True)
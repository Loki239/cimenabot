import logging
import html
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils.formatting import Text
from aiogram.enums import ParseMode

from utils.helpers import separator, get_source_status
from utils.cache import clear_cache

router = Router()

# Global variables for settings (will be moved to config in the future)
links_on = True  # This refers to Rutube search
kp_on = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    response = (
        f"üé¨ <b>–ö–∏–Ω–æ-–±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!</b>\n"
        f"{separator()}"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,\n"
        f"–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ Rutube.\n"
        f"{separator('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')}"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
        f"/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def send_help(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    response = Text(
        "üõ† <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>",
        separator(),
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,",
        "–∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ Rutube.",
        separator("–ö–æ–º–∞–Ω–¥—ã"),
        "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)",
        "/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ",
        "/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞",
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
        separator("–ö—ç—à"),
        "/clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à",
        "/clear_posters - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤",
        "/clear_movie_data - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö",
        "/clear_rutube - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å—Å—ã–ª–æ–∫ Rutube",
        separator("–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞"),
        get_source_status(links_on, kp_on)
    ).as_html()
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@router.message(Command("turn_links"))
async def toggle_links(message: Message):
    global links_on
    links_on = not links_on
    status = "–≤–∫–ª—é—á–µ–Ω" if links_on else "–≤—ã–∫–ª—é—á–µ–Ω"
    logging.info(f"–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube) {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube) —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

@router.message(Command("turn_kp"))
async def toggle_kp(message: Message):
    global kp_on
    kp_on = not kp_on
    status = "–≤–∫–ª—é—á–µ–Ω" if kp_on else "–≤—ã–∫–ª—é—á–µ–Ω"
    logging.info(f"–ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@router.message(Command("settings"))
async def show_settings(message: Message):
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç {message.from_user.id}")
    response = (
        f"‚öô <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</b>\n"
        f"{separator()}"
        f"{get_source_status(links_on, kp_on)}\n"
        f"{separator()}"
        f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
        f"/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ö–∏–Ω–æ–ø–æ–∏—Å–∫"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

# Command handlers for cache clearing
@router.message(Command("clear_cache"))
async def cmd_clear_cache(message: Message):
    """Clear all cache"""
    logging.info(f"User {message.from_user.id} requested to clear all cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    
    # Clear the cache
    result = await clear_cache(clear_all=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω\n\n{result}")

@router.message(Command("clear_posters"))
async def cmd_clear_posters(message: Message):
    """Clear only poster cache"""
    logging.info(f"User {message.from_user.id} requested to clear poster cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤...")
    
    # Clear the poster cache
    result = await clear_cache(clear_all=False, clear_posters=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω\n\n{result}")

@router.message(Command("clear_movie_data"))
async def cmd_clear_movie_data(message: Message):
    """Clear only movie data cache"""
    logging.info(f"User {message.from_user.id} requested to clear movie data cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö...")
    
    # Clear the movie data cache
    result = await clear_cache(clear_all=False, clear_movie_data=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –æ—á–∏—â–µ–Ω\n\n{result}")

@router.message(Command("clear_rutube"))
async def cmd_clear_rutube(message: Message):
    """Clear only Rutube links cache"""
    logging.info(f"User {message.from_user.id} requested to clear Rutube links cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ Rutube...")
    
    # Clear the Rutube links cache
    result = await clear_cache(clear_all=False, clear_rutube=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à —Å—Å—ã–ª–æ–∫ Rutube –æ—á–∏—â–µ–Ω\n\n{result}")

# Function to get the current source settings
def get_search_settings():
    return {
        'links_on': links_on,
        'kp_on': kp_on
    } 
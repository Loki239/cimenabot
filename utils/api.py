import aiohttp
import asyncio
import logging
import os
from utils.cache import (
    get_movie_from_cache, save_movie_to_cache,
    get_rutube_from_cache, save_rutube_to_cache
)

# URL –¥–ª—è Rutube API
RUTUBE_API_SEARCH_URL = 'https://rutube.ru/api/search/video/?query='

# –¢–æ–∫–µ–Ω API –¥–ª—è –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞
KINOPOISK_TOKEN = os.getenv("KINOPOISK_TOKEN")

async def search_rutube_api(title: str):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ Rutube —á–µ—Ä–µ–∑ API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ."""
    # Check cache first
    cached_links = get_rutube_from_cache(title)
    if cached_links is not None:
        logging.info(f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Rutube –¥–ª—è '{title}' ({len(cached_links)} —Å—Å—ã–ª–æ–∫)")
        # Add a flag to identify cached links (for debugging)
        for link in cached_links:
            link['from_cache'] = True
        return cached_links
        
    rutube_links = []
    search_query = f"{title} —Ñ–∏–ª—å–º"
    encoded_query = aiohttp.helpers.quote(search_query)
    url = f"{RUTUBE_API_SEARCH_URL}{encoded_query}"
    logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Rutube API: {url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=7) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    results = data.get('results', [])
                    logging.info(f"Rutube API: –ø–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    if results:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        for video_item in results[:3]:
                            video_id = video_item.get('id')
                            rutube_title = video_item.get('title', '–í–∏–¥–µ–æ Rutube')
                            
                            if video_id:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ (–Ω–µ –Ω–∞ embed)
                                video_url = f"https://rutube.ru/video/{video_id}/"
                                # Validate URL
                                if not video_url.startswith('http'):
                                    video_url = 'https://rutube.ru/video/' + video_id + '/'
                                
                                # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Rutube:"
                                name = rutube_title[:30] + "..." if len(rutube_title) > 30 else rutube_title
                                rutube_links.append({
                                    "name": name,
                                    "url": video_url,
                                    "from_cache": False
                                })
                                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –Ω–∞ Rutube: {video_url} ({name})")
                            else:
                                logging.warning(f"Rutube item –±–µ–∑ video_id: {video_item}")
                else:
                    logging.error(f"Rutube API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å—Ç–∞—Ç—É—Å: {resp.status}, –æ—Ç–≤–µ—Ç: {await resp.text(errors='ignore')}")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rutube API.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Rutube API: {str(e)}")
    
    if not rutube_links:
        logging.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Rutube API.")
    else:
        # Save to cache if we found results
        save_rutube_to_cache(title, rutube_links)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(rutube_links)} —Å—Å—ã–ª–æ–∫ –≤ –∫—ç—à–µ")
        
    return rutube_links

async def get_kinopoisk_data(movie_title):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""
    # Check cache first
    cached_data = get_movie_from_cache(movie_title)
    if cached_data is not None:
        logging.info(f"Returning cached movie data for '{movie_title}'")
        return cached_data
    
    # Continue with regular API call if not in cache
    # Initialize with all keys search_movie expects for kinopoisk_data
    # This ensures that if some fields are missing from API, they are None.
    kinopoisk_data_output = {
        "kinopoiskId": None,
        "nameRu": None,
        "year": None,
        "description": None,
        "ratingKinopoisk": None,
        "genres": [],
        "countries": [],
        "filmLength": None,
        "posterUrlPreview": None
    }
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.kinopoisk.dev/v1.4/movie/search?query={aiohttp.helpers.quote(movie_title)}&page=1&limit=1"
            headers = {"X-API-KEY": KINOPOISK_TOKEN}
            logging.debug(f"Requesting Kinopoisk API: {url} with headers {headers}")
            async with session.get(url, headers=headers, timeout=7) as resp: # Increased timeout slightly
                logging.debug(f"Kinopoisk API response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logging.debug(f"Kinopoisk API response data: {data}")
                    if data.get("docs") and len(data["docs"]) > 0:
                        movie = data["docs"][0]
                        
                        kinopoisk_data_output["kinopoiskId"] = movie.get('id')
                        kinopoisk_data_output["nameRu"] = movie.get('name')
                        if not kinopoisk_data_output["nameRu"]: # Fallback to alternativeName
                            kinopoisk_data_output["nameRu"] = movie.get('alternativeName')
                        
                        kinopoisk_data_output["year"] = movie.get('year')
                        kinopoisk_data_output["description"] = movie.get('description')
                        
                        rating_data = movie.get('rating', {})
                        if isinstance(rating_data, dict):
                            kinopoisk_data_output["ratingKinopoisk"] = rating_data.get('kp')
                        
                        api_genres = movie.get('genres', [])
                        if isinstance(api_genres, list):
                            kinopoisk_data_output["genres"] = [{'genre': g.get('name')} for g in api_genres if isinstance(g, dict) and g.get('name')]

                        api_countries = movie.get('countries', [])
                        if isinstance(api_countries, list):
                            kinopoisk_data_output["countries"] = [{'country': c.get('name')} for c in api_countries if isinstance(c, dict) and c.get('name')]
                        
                        kinopoisk_data_output["filmLength"] = movie.get('movieLength')
                        if kinopoisk_data_output["filmLength"] is None:
                            kinopoisk_data_output["filmLength"] = movie.get('filmLength')

                        poster_data = movie.get('poster', {})
                        if isinstance(poster_data, dict):
                            # –ë–µ—Ä–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞
                            poster_url = poster_data.get('url')
                            if poster_url:
                                kinopoisk_data_output["posterUrlPreview"] = poster_url
                                
                            # Log the poster URL for debugging
                            logging.info(f"Poster URL for '{movie_title}': {kinopoisk_data_output['posterUrlPreview']}")
                        
                        # Critical check: if no ID or name, treat as not found.
                        if not kinopoisk_data_output["kinopoiskId"] or not kinopoisk_data_output["nameRu"]:
                            logging.warning(f"Kinopoisk API: Movie found for '{movie_title}' but missing essential id or name. Data: {movie}")
                            return {} # Return empty dict
                        
                        logging.info(f"Successfully fetched Kinopoisk data for '{movie_title}': ID {kinopoisk_data_output['kinopoiskId']}")
                        if kinopoisk_data_output["kinopoiskId"]:
                            save_movie_to_cache(movie_title, kinopoisk_data_output)
                        return kinopoisk_data_output
                    else:
                        logging.info(f"Kinopoisk API: No movie found for query '{movie_title}'.")
                        return {} 
                else:
                    responseText = await resp.text(errors='ignore')
                    logging.error(f"Kinopoisk API request failed for '{movie_title}', status: {resp.status}, response: {responseText}")
                    return {}
    except asyncio.TimeoutError:
        logging.warning(f"Timeout during Kinopoisk API request for '{movie_title}'")
        return {}
    except Exception as e:
        logging.error(f"Unexpected error in get_kinopoisk_data for '{movie_title}': {e}", exc_info=True)
        return {} 
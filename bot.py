import asyncio
import aiohttp
import aiovk
import logging
import html
import aiosqlite
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, URLInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import Text
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω—ã API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
VK_TOKEN = os.getenv("VK_TOKEN")
KINOPOISK_TOKEN = os.getenv("KINOPOISK_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CX = os.getenv("GOOGLE_CX")

if not all([TELEGRAM_TOKEN, VK_TOKEN, KINOPOISK_TOKEN]):
    logging.error("–ù–µ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

vk_id = 53531262

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def separator(text: str = "") -> str:
    return f"\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ {text} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n" if text else "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

def rating_stars(rating: float) -> str:
    if not rating:
        return "‚òÜ" * 5
    full_stars = int(rating // 2)
    half_star = int(rating % 2 >= 0.5)
    return '‚≠ê' * full_stars + '‚ú®' * half_star + '‚òÜ' * (5 - full_stars - half_star)

async def get_user_settings(user_id: int) -> tuple[bool, bool]:
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT vk_on, kp_on FROM user_settings WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        if row is None:
            await db.execute("INSERT INTO user_settings (user_id, vk_on, kp_on) VALUES (?, ?, ?)", (user_id, 1, 1))
            await db.commit()
            return True, True
        return bool(row[0]), bool(row[1])

async def send_loading_message(message: Message) -> Message:
    return await message.answer("üîç <i>–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</i>", parse_mode=ParseMode.HTML)

async def get_movie_description(film_id: int) -> str:
    url = f"https://api.kinopoisk.dev/v1.4/movie/{film_id}"
    headers = {
        "X-API-KEY": KINOPOISK_TOKEN,
        "Accept": "application/json"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ {film_id}: {str(data)[:500]}")
                    description = data.get('description', '')
                    if not description:
                        description = data.get('shortDescription', '')
                    if not description:
                        description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    return description
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (—Å—Ç–∞—Ç—É—Å {resp.status})")
                    return f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å {resp.status})"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞: {str(e)}")
        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"

async def get_watch_link(title: str) -> str:
    if not GOOGLE_API_KEY or not GOOGLE_CX:
        return ""
    search_query = f"{title} —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–∑ —Å–º—Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    url = f"https://www.googleapis.com/customsearch/v1?key={GOOGLE_API_KEY}&cx={GOOGLE_CX}&q={aiohttp.helpers.quote(search_query)}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get("items"):
                        first_link = data["items"][0]["link"]
                        return first_link
                    else:
                        return ""
                else:
                    logging.error(f"Google API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return ""
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")
        return ""

########## /start handler ####################

@dp.message(CommandStart())
async def send_welcome(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    response = (
        f"üé¨ <b>–ö–∏–Ω–æ-–±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!</b>\n"
        f"{separator()}"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,\n"
        f"–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
        f"{separator('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')}"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
        # f"/new - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ\n"
        # f"/best - –¢–æ–ø 10 —Ñ–∏–ª—å–º–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω\n"
        f"/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

########## /help handler ####################

@dp.message(Command("help"))
async def send_help(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    vk_on, kp_on = await get_user_settings(user_id)
    response = (
        f"üõ† <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n"
        f"{separator()}"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,\n"
        f"–∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
        f"{separator('–ö–æ–º–∞–Ω–¥—ã')}"
        f"/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        f"/turn_vk - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ –≤ VK\n"
        f"/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n"
        f"/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"/new - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ\n"
        f"/best - –¢–æ–ø 10 —Ñ–∏–ª—å–º–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω\n"
        f"/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
        f"{separator('–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞')}"
        f"{'‚úÖ' if vk_on else '‚ùå'} –ü–æ–∏—Å–∫ –≤ VK\n"
        f"{'‚úÖ' if kp_on else '‚ùå'} –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

########## turn on/off cources ####################

@dp.message(Command("turn_vk"))
async def toggle_vk(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT vk_on FROM user_settings WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        if row is None:
            await db.execute("INSERT INTO user_settings (user_id, vk_on, kp_on) VALUES (?, ?, ?)", (user_id, 0, 1))
            status = "–≤—ã–∫–ª—é—á–µ–Ω"
        else:
            new_vk_on = 1 - row[0]
            await db.execute("UPDATE user_settings SET vk_on = ? WHERE user_id = ?", (new_vk_on, user_id))
            status = "–≤–∫–ª—é—á–µ–Ω" if new_vk_on else "–≤—ã–∫–ª—é—á–µ–Ω"
        await db.commit()
    logging.info(f"–ü–æ–∏—Å–∫ –ø–æ VK {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ –≤ VK —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

@dp.message(Command("turn_kp"))
async def toggle_kp(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT kp_on FROM user_settings WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        if row is None:
            await db.execute("INSERT INTO user_settings (user_id, vk_on, kp_on) VALUES (?, ?, ?)", (user_id, 1, 0))
            status = "–≤—ã–∫–ª—é—á–µ–Ω"
        else:
            new_kp_on = 1 - row[0]
            await db.execute("UPDATE user_settings SET kp_on = ? WHERE user_id = ?", (new_kp_on, user_id))
            status = "–≤–∫–ª—é—á–µ–Ω" if new_kp_on else "–≤—ã–∫–ª—é—á–µ–Ω"
        await db.commit()
    logging.info(f"–ü–æ–∏—Å–∫ –ø–æ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

########## /settings handler ####################

@dp.message(Command("settings"))
async def show_settings(message: Message):
    user_id = message.from_user.id
    vk_on, kp_on = await get_user_settings(user_id)
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç {user_id}")
    response = (
        "‚öô <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</b>\n"
        f"{separator()}"
        f"{'‚úÖ' if vk_on else '‚ùå'} –ü–æ–∏—Å–∫ –≤ VK\n"
        f"{'‚úÖ' if kp_on else '‚ùå'} –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n"
        f"{separator()}"
        "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "/turn_vk - –í–∫–ª/–≤—ã–∫–ª VK\n"
        "/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ö–∏–Ω–æ–ø–æ–∏—Å–∫"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new
@dp.message(Command("new"))
async def show_new_movies(message: Message):
    user_id = message.from_user.id
    _, kp_on = await get_user_settings(user_id)
    if not kp_on:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–∏–Ω–æ–∫ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ö–∏–Ω–æ–ø–æ–∏—Å–∫–æ–º –æ—Ç {user_id}")
        await message.answer("üîé <b>–ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω.</b> –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /turn_kp", parse_mode=ParseMode.HTML)
        return

    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–∏–Ω–æ–∫ –æ—Ç {user_id}")
    wait_message = await send_loading_message(message)
    
    current_year = 2024  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2024 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ 2025 –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –¥–∞–Ω–Ω—ã—Ö
    current_month = datetime.now().strftime("%B").upper()
    url = f"https://api.kinopoisk.dev/v2.2/films/premieres?year={current_year}&month={current_month}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={"X-API-KEY": KINOPOISK_TOKEN}) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    movies = data.get("items", [])
                    if not movies:
                        response = "üòï <b>–ù–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>"
                        await message.answer(response, parse_mode=ParseMode.HTML)
                        await wait_message.delete()
                        return
                    response = f"üé¨ <b>–ù–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã {current_year} –≥–æ–¥–∞:</b>\n{separator()}"
                    for movie in movies[:10]:
                        title = movie.get('nameRu', movie.get('nameEn', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'))
                        year = movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                        film_id = movie.get('kinopoiskId')
                        kp_url = f"https://www.kinopoisk.ru/film/{film_id}/" if film_id else None
                        vk_search_query = f"{title} {year}" if year != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else title
                        vk_search_url = f"https://vk.com/video?q={aiohttp.helpers.quote(vk_search_query)}"
                        response += f"- <a href='{kp_url}'>{html.escape(title)}</a> | <a href='{vk_search_url}'>–ü–æ–∏—Å–∫ –≤ VK</a>\n"
                    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤–∏–Ω–æ–∫: {response}")
                    await message.answer(response, parse_mode=ParseMode.HTML)
                else:
                    response = f"‚ö† <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ç—É—Å {resp.status})</i>"
                    logging.error(f"Kinopoisk API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    await message.answer(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {str(e)}")
        response = "‚ö† <i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</i>"
        await message.answer(response, parse_mode=ParseMode.HTML)
    finally:
        await wait_message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /best
@dp.message(Command("best"))
async def show_best_movies(message: Message):
    user_id = message.from_user.id
    _, kp_on = await get_user_settings(user_id)
    if not kp_on:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ö–∏–Ω–æ–ø–æ–∏—Å–∫–æ–º –æ—Ç {user_id}")
        await message.answer("üîé <b>–ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω.</b> –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /turn_kp", parse_mode=ParseMode.HTML)
        return

    logging.info(f"–ó–∞–ø—Ä–æ—Å —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –æ—Ç {user_id}")
    wait_message = await send_loading_message(message)
    
    url = "https://api.kinopoisk.dev/v2.2/films/top?type=TOP_250_BEST_FILMS&page=1"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={"X-API-KEY": KINOPOISK_TOKEN}) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    movies = data.get("films", [])
                    if not movies:
                        response = "üòï <b>–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>"
                        await message.answer(response, parse_mode=ParseMode.HTML)
                        await wait_message.delete()
                        return
                    response = f"üé¨ <b>–¢–æ–ø 10 —Ñ–∏–ª—å–º–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω:</b>\n{separator()}"
                    for movie in movies[:10]:
                        title = movie.get('nameRu', movie.get('nameEn', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'))
                        year = movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                        film_id = movie.get('filmId')
                        kp_url = f"https://www.kinopoisk.ru/film/{film_id}/" if film_id else None
                        vk_search_query = f"{title} {year}" if year != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else title
                        vk_search_url = f"https://vk.com/video?q={aiohttp.helpers.quote(vk_search_query)}"
                        response += f"- <a href='{kp_url}'>{html.escape(title)}</a> | <a href='{vk_search_url}'>–ü–æ–∏—Å–∫ –≤ VK</a>\n"
                    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤: {response}")
                    await message.answer(response, parse_mode=ParseMode.HTML)
                else:
                    response = f"‚ö† <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ç—É—Å {resp.status})</i>"
                    logging.error(f"Kinopoisk API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    await message.answer(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤: {str(e)}")
        response = "‚ö† <i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</i>"
        await message.answer(response, parse_mode=ParseMode.HTML)
    finally:
        await wait_message.delete()

########## /history handler ####################
@dp.message(Command("history"))
async def show_history(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç {user_id}")
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT query, timestamp FROM search_history WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", (user_id,))
        rows = await cursor.fetchall()
        if not rows:
            response = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.</b>"
        else:
            response = f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏:</b>\n{separator()}"
            for row in rows:
                query, timestamp = row
                response += f"- {html.escape(query)} ({timestamp})\n"
        logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {response}")
        await message.answer(response, parse_mode=ParseMode.HTML)

########## /stats handler ####################
@dp.message(Command("stats"))
async def show_stats(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç {user_id}")
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT movie_title, count FROM suggestions WHERE user_id = ? ORDER BY count DESC LIMIT 10", (user_id,))
        rows = await cursor.fetchall()
        if not rows:
            response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞.</b>"
        else:
            response = f"üìä <b>–ß–∞—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ñ–∏–ª—å–º—ã:</b>{separator()}"
            for row in rows:
                movie_title, count = row
                response += f"- {html.escape(movie_title)}: {count} —Ä–∞–∑\n"
        logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response}")
        await message.answer(response, parse_mode=ParseMode.HTML)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
@dp.message(F.text)
async def search_movie(message: Message):
    user_id = message.from_user.id
    vk_on, kp_on = await get_user_settings(user_id)
    
    if not vk_on and not kp_on:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –æ—Ç {user_id}")
        response = (
            f"üîé <b>–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>\n"
            f"{separator()}"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫:\n"
            f"/turn_vk - –ø–æ–∏—Å–∫ –≤ –í–ö\n"
            f"/turn_kp - –ø–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n"
            f"{separator()}"
            f"<i>–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</i>"
        )
        logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response}")
        await message.answer(response, parse_mode=ParseMode.HTML)
        return

    movie_title = message.text
    logging.info(f"–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {movie_title} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
    async with aiosqlite.connect('bot.db') as db:
        await db.execute("INSERT INTO search_history (user_id, query) VALUES (?, ?)", (user_id, movie_title))
        await db.commit()
    
    wait_message = await send_loading_message(message)
    
    movie_details = ""
    watch_link = ""
    poster_url = None
    suggestion_title = None
    video_title = None
    vk_search_query = movie_title
    description = ""
    watch_link_google = ""

    if kp_on:
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://api.kinopoisk.dev/v1.4/movie/search?query={aiohttp.helpers.quote(movie_title)}&page=1&limit=1"
                async with session.get(url, headers={"X-API-KEY": KINOPOISK_TOKEN}) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data.get("docs"):
                            movie = data["docs"][0]
                            title = movie.get('name', movie.get('alternativeName', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            year = movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                            rating = movie.get('rating', {}).get('kp', 0)
                            countries = ", ".join([c.get('name', '') for c in movie.get('countries', [])][:3])
                            genres = ", ".join([g.get('name', '') for g in movie.get('genres', [])][:3])
                            film_id = movie.get('id')
                            kp_url = f"https://www.kinopoisk.ru/film/{film_id}/" if film_id else None
                            poster_url = movie.get('poster', {}).get('url')
                            
                            title_escaped = html.escape(str(title))
                            year_escaped = html.escape(str(year))
                            countries_escaped = html.escape(str(countries) or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                            genres_escaped = html.escape(str(genres) or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                            
                            movie_details = (
                                f"üé¨ <b>{title_escaped}</b> ({year_escaped})\n"
                                f"{separator()}"
                                f"{rating_stars(rating)} <b>{rating}/10</b>\n"
                                f"üåç <i>–°—Ç—Ä–∞–Ω—ã:</i> {countries_escaped}\n"
                                f"üé≠ <i>–ñ–∞–Ω—Ä—ã:</i> {genres_escaped}\n"
                                f"{separator()}"
                            )
                            if kp_url:
                                movie_details += f"üîó <a href='{kp_url}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ</a>\n"
                            suggestion_title = title
                            logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {movie_details}")
                            vk_search_query = f"{title} {year}" if year != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else title
                            
                            # –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                            description = await get_movie_description(film_id)
                            movie_details += f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.escape(description)}\n"
                            
                            # –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            watch_link_google = await get_watch_link(title)
                            if watch_link_google:
                                movie_details += f"\nüîó <a href='{watch_link_google}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>\n"
                    else:
                        logging.error(f"Kinopoisk API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
        except Exception as e:
            logging.error(f"Kinopoisk API –æ—à–∏–±–∫–∞: {str(e)}")
            movie_details = "‚ö† <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞</i>\n"

    vk_search_url = f"https://vk.com/video?q={aiohttp.helpers.quote(vk_search_query)}"
    
    if vk_on:
        try:
            async with aiovk.TokenSession(access_token=VK_TOKEN) as session:
                vk_api = aiovk.API(session)
                videos = await vk_api.video.search(q=vk_search_query, count=1, sort=2)
                logging.info(f"VK API –æ—Ç–≤–µ—Ç: {videos}")
                if videos.get("items"):
                    video = videos["items"][0]
                    watch_link = video.get("player")
                    video_title = video.get("title")
                    logging.info(f"VK –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ: {video_title}, URL: {watch_link}")
                else:
                    watch_link = None
                    video_title = None
                    logging.info("VK –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logging.error(f"VK API –æ—à–∏–±–∫–∞: {str(e)}")
            watch_link = None
            video_title = None
    
    if not watch_link and vk_on:
        movie_details += f"üîç <a href='{vk_search_url}'>–ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤ VK</a>\n"
    
    if not movie_details and watch_link and video_title:
        movie_details = f"üé¨ <b>{html.escape(video_title)}</b>\n{separator()}\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å VK</i>\n"
        suggestion_title = video_title
    
    if suggestion_title:
        async with aiosqlite.connect('bot.db') as db:
            await db.execute("""
                INSERT INTO suggestions (user_id, movie_title, count)
                VALUES (?, ?, 1)
                ON CONFLICT(user_id, movie_title) DO UPDATE SET count = count + 1
            """, (user_id, suggestion_title))
            await db.commit()
    
    response_parts = []
    if movie_details:
        response_parts.append(movie_details)
    
    if watch_link:
        watch_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂ –°–º–æ—Ç—Ä–µ—Ç—å –≤ VK", url=watch_link)]
        ])
    else:
        watch_button = None
    
    if not response_parts and not watch_link:
        response = (
            f"üòï <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n"
            f"{separator()}"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"- –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            f"- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é\n"
            f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        )
        if vk_on:
            response += f"üîç <a href='{vk_search_url}'>–ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤ VK</a>"
        logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {response}")
        await message.answer(response, parse_mode=ParseMode.HTML)
    else:
        if poster_url:
            try:
                await message.answer_photo(
                    URLInputFile(poster_url),
                    caption=movie_details,
                    parse_mode=ParseMode.HTML,
                    reply_markup=watch_button
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
                await message.answer(
                    movie_details,
                    parse_mode=ParseMode.HTML,
                    reply_markup=watch_button
                )
        else:
            await message.answer(
                movie_details,
                parse_mode=ParseMode.HTML,
                reply_markup=watch_button
            )
    
    await wait_message.delete()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    async with aiosqlite.connect('bot.db') as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                vk_on BOOLEAN DEFAULT 1,
                kp_on BOOLEAN DEFAULT 1
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS search_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                query TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS suggestions (
                user_id INTEGER,
                movie_title TEXT,
                count INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, movie_title)
            )
        """)
        await db.commit()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
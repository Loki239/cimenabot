import asyncio
import aiohttp
import logging
import html
import os
import signal
import sys
import re
import urllib.parse
import random
import json
import time
import os.path
import hashlib
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, URLInputFile, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.formatting import Text
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
from database import Database
from PIL import Image, ImageDraw, ImageFont

# Load environment variables from .env file
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –¢–æ–∫–µ–Ω—ã API (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
KINOPOISK_TOKEN = os.getenv("KINOPOISK_TOKEN")

# URL –¥–ª—è Rutube API
RUTUBE_API_SEARCH_URL = 'https://rutube.ru/api/search/video/?query='

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
links_on = True # This now refers to Rutube search
kp_on = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# Add these cache-related constants after other constants
CACHE_DIR = "cache"
POSTERS_DIR = os.path.join(CACHE_DIR, "posters")
MOVIE_DATA_CACHE = os.path.join(CACHE_DIR, "movie_data.json")
RUTUBE_CACHE = os.path.join(CACHE_DIR, "rutube_links.json")
CACHE_EXPIRY_DAYS = 21  # 3 weeks cache

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def separator(text: str = "") -> str:
    return f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ {text} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" if text else "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

def rating_stars(rating: float) -> str:
    if not rating:
        return "‚òÜ" * 5
    full_stars = int(rating // 2)
    half_star = int(rating % 2 >= 0.5)
    return '‚≠ê' * full_stars + '‚ú®' * half_star + '‚òÜ' * (5 - full_stars - half_star)

def get_source_status() -> str:
    return (
        f"{'‚úÖ' if links_on else '‚ùå'} –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
        f"{'‚úÖ' if kp_on else '‚ùå'} –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ"
    )

async def send_loading_message(message: Message) -> Message:
    return await message.answer("üîç <i>–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</i>", parse_mode=ParseMode.HTML)

def format_datetime(iso_date: str) -> str:
    """Format ISO datetime to a more readable format"""
    dt = datetime.fromisoformat(iso_date)
    return dt.strftime("%d.%m.%Y %H:%M")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_welcome(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    response = (
        f"üé¨ <b>–ö–∏–Ω–æ-–±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!</b>\n"
        f"{separator()}"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,\n"
        f"–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ Rutube.\n"
        f"{separator('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')}"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
        f"/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def send_help(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    response = Text(
        "üõ† <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>",
        separator(),
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞,",
        "–∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ Rutube.",
        separator("–ö–æ–º–∞–Ω–¥—ã"),
        "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)",
        "/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ",
        "/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞",
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
        separator("–ö—ç—à"),
        "/clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à",
        "/clear_posters - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤",
        "/clear_movie_data - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö",
        "/clear_rutube - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å—Å—ã–ª–æ–∫ Rutube",
        separator("–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞"),
        get_source_status()
    ).as_html()
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@dp.message(Command("turn_links"))
async def toggle_links(message: Message):
    global links_on
    links_on = not links_on
    status = "–≤–∫–ª—é—á–µ–Ω" if links_on else "–≤—ã–∫–ª—é—á–µ–Ω"
    logging.info(f"–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube) {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube) —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

@dp.message(Command("turn_kp"))
async def toggle_kp(message: Message):
    global kp_on
    kp_on = not kp_on
    status = "–≤–∫–ª—é—á–µ–Ω" if kp_on else "–≤—ã–∫–ª—é—á–µ–Ω"
    logging.info(f"–ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ {status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(f"üîò –ü–æ–∏—Å–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ —Ç–µ–ø–µ—Ä—å <b>{status}</b>", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@dp.message(Command("settings"))
async def show_settings(message: Message):
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç {message.from_user.id}")
    response = (
        f"‚öô <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</b>\n"
        f"{separator()}"
        f"{get_source_status()}\n"
        f"{separator()}"
        f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
        f"/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ö–∏–Ω–æ–ø–æ–∏—Å–∫"
    )
    logging.info(f"HTML –æ—Ç–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response}")
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
@dp.message(Command("history"))
async def show_history(message: Message):
    logging.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    history = await db.get_search_history(user_id)
    if not history:
        await message.answer("üìù <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞</b>", parse_mode=ParseMode.HTML)
        return
    history_text = [f"üìù <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞</b>", separator()]
    for i, item in enumerate(history, 1):
        search_time = format_datetime(item["timestamp"])
        history_text.append(f"{i}. <b>{html.escape(item['query'])}</b> ({search_time})")
    response = "\n".join(history_text)
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def show_stats(message: Message):
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    stats = await db.get_movie_stats(user_id)
    if not stats:
        await message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É—Å—Ç–∞</b>", parse_mode=ParseMode.HTML)
        return
    stats_text = [f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>", separator()]
    for i, item in enumerate(stats, 1):
        title = html.escape(item["title"])
        year = f" ({item['year']})" if item["year"] else ""
        count = item["count"]
        description = item.get("description", "")
        if description:
            short_desc = html.escape(description[:50] + "..." if len(description) > 50 else description)
            stats_text.append(f"{i}. <b>{title}{year}</b> ‚Äî {count} {pluralize_times(count)}\n   <i>{short_desc}</i>")
        else:
            stats_text.append(f"{i}. <b>{title}{year}</b> ‚Äî {count} {pluralize_times(count)}")
    stats_text.append(separator())
    stats_text.append("<i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ</i>")
    response = "\n".join(stats_text)
    await message.answer(response, parse_mode=ParseMode.HTML)

def pluralize_times(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return "—Ä–∞–∑"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "—Ä–∞–∑–∞"
    else:
        return "—Ä–∞–∑"

def init_cache_directories():
    """Initialize cache directories if they don't exist"""
    os.makedirs(CACHE_DIR, exist_ok=True)
    os.makedirs(POSTERS_DIR, exist_ok=True)
    
    # Initialize cache files if they don't exist
    for cache_file in [MOVIE_DATA_CACHE, RUTUBE_CACHE]:
        if not os.path.exists(cache_file):
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump({}, f)
    
    logging.info("Cache directories initialized")

def get_cache_key(text):
    """Generate a consistent cache key for a text search query"""
    # Normalize the text: lowercase and remove extra whitespace
    normalized = ' '.join(text.lower().split())
    # Create a hash for the normalized text
    return hashlib.md5(normalized.encode('utf-8')).hexdigest()

def save_movie_to_cache(query, movie_data):
    """Save movie data to cache"""
    try:
        cache_key = get_cache_key(query)
        
        # Load existing cache
        with open(MOVIE_DATA_CACHE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
        
        # Add the data with timestamp
        cache[cache_key] = {
            'timestamp': time.time(),
            'data': movie_data,
            'original_query': query
        }
        
        # Save updated cache
        with open(MOVIE_DATA_CACHE, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
        
        logging.info(f"Movie data for '{query}' saved to cache")
        return True
    except Exception as e:
        logging.error(f"Failed to save movie data to cache: {str(e)}")
        return False

def get_movie_from_cache(query):
    """Get movie data from cache if it exists and is not expired"""
    try:
        cache_key = get_cache_key(query)
        
        # Check if cache file exists
        if not os.path.exists(MOVIE_DATA_CACHE):
            return None
        
        # Load cache
        with open(MOVIE_DATA_CACHE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
        
        # Check if key exists
        if cache_key not in cache:
            return None
        
        # Check if cache is expired
        cached_data = cache[cache_key]
        cache_time = cached_data['timestamp']
        current_time = time.time()
        
        if current_time - cache_time > CACHE_EXPIRY_DAYS * 24 * 60 * 60:
            logging.info(f"Cache for '{query}' is expired")
            return None
        
        # Enhanced logging
        movie_title = cached_data['data'].get('nameRu', query)
        movie_id = cached_data['data'].get('kinopoiskId', 'Unknown')
        logging.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{movie_title}' (ID: {movie_id})")
        return cached_data['data']
    except Exception as e:
        logging.error(f"Error reading movie cache: {str(e)}")
        return None

def save_rutube_to_cache(query, links):
    """Save Rutube links to cache"""
    try:
        cache_key = get_cache_key(query)
        
        # Load existing cache
        with open(RUTUBE_CACHE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
        
        # Add the data with timestamp
        cache[cache_key] = {
            'timestamp': time.time(),
            'links': links,
            'original_query': query
        }
        
        # Save updated cache
        with open(RUTUBE_CACHE, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
        
        logging.info(f"Rutube links for '{query}' saved to cache")
        return True
    except Exception as e:
        logging.error(f"Failed to save Rutube links to cache: {str(e)}")
        return False

def get_rutube_from_cache(query):
    """Get Rutube links from cache if they exist and are not expired"""
    try:
        cache_key = get_cache_key(query)
        
        # Check if cache file exists
        if not os.path.exists(RUTUBE_CACHE):
            return None
        
        # Load cache
        with open(RUTUBE_CACHE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
        
        # Check if key exists
        if cache_key not in cache:
            return None
        
        # Check if cache is expired
        cached_data = cache[cache_key]
        cache_time = cached_data['timestamp']
        current_time = time.time()
        
        if current_time - cache_time > CACHE_EXPIRY_DAYS * 24 * 60 * 60:
            logging.info(f"Rutube links cache for '{query}' is expired")
            return None
        
        # Enhanced logging
        num_links = len(cached_data['links'])
        logging.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ Rutube –¥–ª—è '{query}' ({num_links} —Å—Å—ã–ª–æ–∫)")
        return cached_data['links']
    except Exception as e:
        logging.error(f"Error reading Rutube links cache: {str(e)}")
        return None

def get_cached_poster_path(movie_id):
    """Get path to cached poster if it exists and is not expired"""
    try:
        if not movie_id:
            return None
            
        # Check poster directory
        for filename in os.listdir(POSTERS_DIR):
            # Format: movieid_timestamp.jpg
            if filename.startswith(f"{movie_id}_"):
                file_path = os.path.join(POSTERS_DIR, filename)
                
                # Parse timestamp from filename
                try:
                    timestamp_str = filename.split('_')[1].split('.')[0]
                    timestamp = float(timestamp_str)
                    
                    # Check if expired
                    current_time = time.time()
                    if current_time - timestamp > CACHE_EXPIRY_DAYS * 24 * 60 * 60:
                        logging.info(f"Cached poster for movie {movie_id} is expired")
                        os.remove(file_path)  # Remove expired poster
                        return None
                    
                    logging.info(f"Using cached poster for movie {movie_id}")
                    return file_path
                except Exception as e:
                    logging.error(f"Error parsing poster filename: {str(e)}")
        
        return None
    except Exception as e:
        logging.error(f"Error checking for cached poster: {str(e)}")
        return None

def save_poster_to_cache(movie_id, poster_data):
    """Save poster data to cache"""
    try:
        if not movie_id:
            return None
            
        # Create filename with timestamp
        timestamp = time.time()
        filename = f"{movie_id}_{timestamp}.jpg"
        file_path = os.path.join(POSTERS_DIR, filename)
        
        # Save poster
        with open(file_path, 'wb') as f:
            f.write(poster_data)
        
        logging.info(f"Poster for movie {movie_id} saved to cache")
        return file_path
    except Exception as e:
        logging.error(f"Failed to save poster to cache: {str(e)}")
        return None

# Add a function to check for command-like text
def is_command_without_slash(text):
    """Check if text looks like a command but without the leading slash"""
    command_keywords = [
        "clear_cache", "clear_posters", "clear_movie_data", "clear_rutube", 
        "start", "help", "settings", "history", "stats", "turn_links", "turn_kp"
    ]
    # Strip any spaces and convert to lowercase
    text = text.strip().lower()
    return text in command_keywords

# Modify the search_movie function to check for command-like text
@dp.message(F.text)
async def search_movie(message: Message):
    # Check if message looks like a command without slash
    if is_command_without_slash(message.text.strip().lower()):
        command_name = message.text.strip().lower()
        await message.answer(
            f"–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –Ω–æ –∑–∞–±—ã–ª–∏ —Å–ª—ç—à.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: <code>/{command_name}</code>",
            parse_mode=ParseMode.HTML
        )
        return

    if not links_on and not kp_on:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –æ—Ç {message.from_user.id}")
        response = (
            f"üîé <b>–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>\n"
            f"{separator()}"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫:\n"
            f"/turn_links - –í–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ (Rutube)\n"
            f"/turn_kp - –í–∫–ª/–≤—ã–∫–ª –ö–∏–Ω–æ–ø–æ–∏—Å–∫"
        )
        await message.answer(response, parse_mode=ParseMode.HTML)
        return

    query = message.text.strip()
    user_id = message.from_user.id
    
    # Log request with cache-awareness flag
    cache_log = "üîÑ" if (get_movie_from_cache(query) is not None or get_rutube_from_cache(query) is not None) else "üîç"
    logging.info(f"{cache_log} –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å '{query}' –æ—Ç {user_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    await db.add_search(user_id, query)
    
    loading_msg = await send_loading_message(message)
    
    tasks = []
    if kp_on:
        tasks.append(asyncio.create_task(get_kinopoisk_data(query)))
    if links_on: # Rutube links
        tasks.append(asyncio.create_task(search_rutube_api(query)))

    kinopoisk_data = None
    video_links = [] # –¢–æ–ª—å–∫–æ –¥–ª—è Rutube

    if tasks:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        task_results = await asyncio.gather(*tasks, return_exceptions=True)
        for res_item in task_results:
            if isinstance(res_item, Exception):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {res_item}")
            elif isinstance(res_item, dict) and "kinopoiskId" in res_item: # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
                kinopoisk_data = res_item
            elif isinstance(res_item, list): # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Rutube
                video_links.extend(res_item)

        from_cache = ""
        if kinopoisk_data and "cache_source" in kinopoisk_data:
            from_cache = " (–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞)"
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞{from_cache}: {'–î–∞' if kinopoisk_data else '–ù–µ—Ç'}")
        
        from_cache = ""
        if len(video_links) > 0 and hasattr(video_links[0], "cache_source"):
            from_cache = " (–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞)"
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏ (Rutube){from_cache}: {len(video_links)}")
    else:
        logging.info("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å.")

    response_parts = []
    image_url = None

    if kinopoisk_data:
        await db.add_movie(user_id, kinopoisk_data.get("nameRu", query), kinopoisk_data.get("year"), kinopoisk_data.get("description"))
        title = kinopoisk_data.get("nameRu", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        year = kinopoisk_data.get("year", "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        description = kinopoisk_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        rating_kp = kinopoisk_data.get("ratingKinopoisk")
        genres = ", ".join([g["genre"] for g in kinopoisk_data.get("genres", [])])
        countries = ", ".join([c["country"] for c in kinopoisk_data.get("countries", [])])
        film_length = kinopoisk_data.get("filmLength", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        response_parts.append(f"üé¨ <b>{html.escape(title)} ({year})</b>")
        response_parts.append(f"<b>–ñ–∞–Ω—Ä:</b> {html.escape(genres)}")
        response_parts.append(f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {html.escape(countries)}")
        if film_length and film_length > 0:
            response_parts.append(f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {film_length} –º–∏–Ω.")
        if rating_kp:
            response_parts.append(f"<b>–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞:</b> {rating_kp} {rating_stars(rating_kp)}")
        response_parts.append(separator())
        response_parts.append(f"<i>{html.escape(description)}</i>")
        
        image_url = kinopoisk_data.get("posterUrlPreview")

    if links_on and not video_links and not kinopoisk_data: # –ï—Å–ª–∏ –∏—Å–∫–∞–ª–∏ —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ (–¥–∞–∂–µ –∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å–º–µ)
        response_parts.append(f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{html.escape(query)}</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ, –Ω–∏ –Ω–∞ Rutube.")
    elif links_on and not video_links and kinopoisk_data: # –ï—Å–ª–∏ –∏–Ω—Ñ–æ –µ—Å—Ç—å, –Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç
        response_parts.append(separator("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"))
        response_parts.append("‚Ñπ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ Rutube –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    elif video_links: # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –µ—Å—Ç—å
        response_parts.append(separator("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä (Rutube)"))
        response_parts.append("üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É")
        
        # Create an inline keyboard with buttons for Rutube links
        keyboard = []
        for i, link_info in enumerate(video_links[:5], 1): # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Å—ã–ª–æ–∫
            # Ensure button text is safe, limit length further to avoid huge buttons
            name = link_info['name']
            # Remove "Rutube:" prefix if it exists
            if name.startswith("Rutube: "):
                name = name[8:]  # Remove "Rutube: " (8 characters)
                
            safe_name = html.escape(name)
            if len(safe_name) > 25:
                safe_name = safe_name[:25] + "..."
            button_text = f"{i}. {safe_name}"
            
            # Ensure URL is properly formatted
            url = link_info['url']
            if not url.startswith('http'):
                url = 'https://' + url
                
            # Create button with properly escaped text and URL
            keyboard.append([InlineKeyboardButton(text=button_text, url=url)])
            logging.info(f"Created button with text: '{button_text}', URL: {url}")
        
        # Create keyboard markup
        try:
            rutube_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
            logging.info(f"Created inline keyboard with {len(keyboard)} buttons")
        except Exception as e:
            logging.error(f"Failed to create keyboard: {str(e)}")
            rutube_keyboard = None
    else:
        rutube_keyboard = None

    if not kinopoisk_data and not links_on: # –ï—Å–ª–∏ –ö–ü –≤—ã–∫–ª—é—á–µ–Ω –∏ —Å—Å—ã–ª–∫–∏ —Ç–æ–∂–µ (—Ö–æ—Ç—è —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ)
        response_parts.append("üòî –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ /settings.")
    elif not kinopoisk_data and not video_links and not links_on: # –ö–ü –≤—ã–∫–ª—é—á–µ–Ω, —Å—Å—ã–ª–æ–∫ –Ω–µ –∏—Å–∫–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, links_on –±—ã–ª false –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
        response_parts.append("üòî –ü–æ–∏—Å–∫ –ø–æ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É –æ—Ç–∫–ª—é—á–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ Rutube —Ç–∞–∫–∂–µ –Ω–µ—Ç –∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–º –æ—Ç–∫–ª—é—á–µ–Ω.")

    final_response = "\n".join(response_parts)

    # –£–¥–∞–ª—è–µ–º loading_msg —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    # await loading_msg.delete()

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
    if image_url:
        poster_paths = []
        poster_loaded = False
        random_filename = f"poster_{random.randint(1000, 9999)}.jpg"
        
        # First check for cached poster
        cached_poster = None
        if kinopoisk_data and kinopoisk_data.get("kinopoiskId"):
            movie_id = kinopoisk_data.get("kinopoiskId")
            cached_poster = get_cached_poster_path(movie_id)
        
        if cached_poster:
            poster_paths.append(cached_poster)
            poster_loaded = True
            logging.info(f"Using cached poster for movie: {kinopoisk_data.get('nameRu', 'Unknown')}")
        else:
            # Regular poster download logic
            try:
                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–µ—Ä: {image_url}")
                async with aiohttp.ClientSession() as session:
                    try:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ—Å—Ç–µ—Ä–∞ –¥–æ 15 —Å–µ–∫—É–Ω–¥
                        async with session.get(image_url, timeout=15) as resp:
                            if resp.status == 200:
                                poster_data = await resp.read()
                                
                                # If we have movie ID, save to cache
                                if kinopoisk_data and kinopoisk_data.get("kinopoiskId"):
                                    movie_id = kinopoisk_data.get("kinopoiskId")
                                    cached_path = save_poster_to_cache(movie_id, poster_data)
                                    if cached_path:
                                        poster_paths.append(cached_path)
                                        poster_loaded = True
                                        logging.info(f"Poster saved to cache and loaded for movie ID: {movie_id}")
                                    else:
                                        # Fallback to temporary file if caching fails
                                        with open(random_filename, "wb") as f:
                                            f.write(poster_data)
                                        poster_paths.append(random_filename)
                                        poster_loaded = True
                                else:
                                    # No movie ID, use temporary file
                                    with open(random_filename, "wb") as f:
                                        f.write(poster_data)
                                    poster_paths.append(random_filename)
                                    poster_loaded = True
                                
                                logging.info(f"–ü–æ—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {image_url}")
                            else:
                                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å: {resp.status}, URL: {image_url}")
                    except asyncio.TimeoutError:
                        logging.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–µ—Ä–∞ (15 —Å–µ–∫): {image_url}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–µ—Ä–∞ {image_url}: {str(e)}")
            except Exception as e:
                logging.error(f"–í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–µ—Ä–∞ {image_url}: {str(e)}")

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if not poster_loaded:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä –¥–ª—è '{kinopoisk_data.get('nameRu', '–§–∏–ª—å–º')}', —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π")
            try:
                # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                from PIL import Image, ImageDraw, ImageFont
                
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç–µ—Ä–∞ - —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
                img = Image.new('RGB', (500, 750), color=(15, 30, 60))
                draw = ImageDraw.Draw(img)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≥–æ–¥ —Ñ–∏–ª—å–º–∞
                movie_title = kinopoisk_data.get("nameRu", "–§–∏–ª—å–º") if kinopoisk_data else "–§–∏–ª—å–º"
                movie_year = str(kinopoisk_data.get("year", "")) if kinopoisk_data else ""
                
                logging.info(f"–°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä –¥–ª—è: '{movie_title}' ({movie_year})")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω (–æ—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –¥–æ —á–µ—Ä–Ω–æ–≥–æ)
                for y in range(750):
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
                    color_value = max(0, 15 - int(y / 750 * 15))
                    color_value2 = max(0, 30 - int(y / 750 * 30))
                    draw.line([(0, y), (500, y)], fill=(color_value, color_value2, color_value * 4))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–ª–µ–º—É –∫–∏–Ω–æ–ø–ª–µ–Ω–∫–∏ –≤–≤–µ—Ä—Ö—É
                draw.rectangle([(50, 50), (450, 100)], fill=(20, 40, 80), outline=(255, 255, 255), width=2)
                
                # –†–∏—Å—É–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –ø–ª–µ–Ω–∫–∏
                for x in range(70, 450, 40):
                    draw.rectangle([(x, 60), (x+20, 90)], fill=(40, 60, 100))
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                text_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
                
                try:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    title_lines = []
                    if len(movie_title) > 20:
                        words = movie_title.split()
                        line = []
                        for word in words:
                            line.append(word)
                            if len(' '.join(line)) > 20:
                                if len(line) > 1:
                                    line.pop()  # Remove last word that made it too long
                                    title_lines.append(' '.join(line))
                                    line = [word]
                                else:
                                    title_lines.append(' '.join(line))
                                    line = []
                        if line:  # Add any remaining words
                            title_lines.append(' '.join(line))
                    else:
                        title_lines = [movie_title]
                    
                    # –†–∏—Å—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
                    y_position = 250
                    for line in title_lines:
                        draw.text((250, y_position), line, fill=text_color, anchor="mm")
                        y_position += 40
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
                    if movie_year:
                        draw.text((250, y_position + 20), movie_year, fill=(200, 200, 200), anchor="mm")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
                    # –ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –µ—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                    draw.text((250, 250), movie_title[:20], fill=text_color, anchor="mm")
                    if len(movie_title) > 20:
                        draw.text((250, 290), movie_title[20:40], fill=text_color, anchor="mm")
                    if movie_year:
                        draw.text((250, 330), movie_year, fill=(200, 200, 200), anchor="mm")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ" –≤–Ω–∏–∑—É
                draw.text((250, 650), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ", fill=(180, 180, 180), anchor="mm")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä
                img.save(random_filename)
                poster_paths.append(random_filename)
                poster_loaded = True
                logging.info(f"–°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä –¥–ª—è '{movie_title}'")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–µ—Ä–∞: {str(e)}")
                # –î–∞–∂–µ —Å —ç—Ç–æ–π –æ—à–∏–±–∫–æ–π –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç–µ—Ä
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Å—Ç–µ—Ä —Å —Ñ–æ–Ω–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º "–§–∏–ª—å–º"
                    img = Image.new('RGB', (500, 750), color=(15, 30, 60))
                    draw = ImageDraw.Draw(img)
                    draw.text((250, 375), "–§–∏–ª—å–º", fill=(255, 255, 255), anchor="mm")
                    img.save(random_filename)
                    poster_paths.append(random_filename)
                    poster_loaded = True
                    logging.info("–°–æ–∑–¥–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–æ—Å—Ç–µ—Ä")
                except Exception as e2:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–æ—Å—Ç–µ—Ä: {str(e2)}")

        if poster_loaded and poster_paths:
            try:
                await loading_msg.delete()
                if len(final_response) > 1000:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    movie_name = kinopoisk_data.get("nameRu", "–§–∏–ª—å–º") if kinopoisk_data else "–§–∏–ª—å–º"
                    short_caption = f"üé¨ <b>{movie_name}</b>"
                    await message.answer_photo(
                        photo=FSInputFile(poster_paths[0]),
                        caption=short_caption,
                        parse_mode=ParseMode.HTML
                    )
                    await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                        disable_web_page_preview=True,
                                        reply_markup=rutube_keyboard)
                else:
                    await message.answer_photo(
                        photo=FSInputFile(poster_paths[0]),
                        caption=final_response,
                        parse_mode=ParseMode.HTML,
                        reply_markup=rutube_keyboard
                    )
                logging.info("–ü–æ—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                await loading_msg.delete()  # –£–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                    disable_web_page_preview=True,
                                    reply_markup=rutube_keyboard)
            finally:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –Ω–æ –ù–ï –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ—Ä—ã
                for path in poster_paths:
                    if os.path.exists(path):
                        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if os.path.dirname(path) != POSTERS_DIR:
                            try:
                                os.remove(path)
                                logging.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–µ—Ä–∞: {path}")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {path}: {e}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–µ—Ä")
            await loading_msg.delete()
            await message.answer(final_response, parse_mode=ParseMode.HTML, 
                                disable_web_page_preview=True,
                                reply_markup=rutube_keyboard)
    elif final_response:
        await loading_msg.delete()
        await message.answer(final_response, parse_mode=ParseMode.HTML, 
                            disable_web_page_preview=True,
                            reply_markup=rutube_keyboard)
    else:
        await loading_msg.delete()
        await message.answer(f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å <b>{html.escape(query)}</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)

async def search_rutube_api(title: str):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ Rutube —á–µ—Ä–µ–∑ API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ."""
    # Check cache first
    cached_links = get_rutube_from_cache(title)
    if cached_links is not None:
        logging.info(f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Rutube –¥–ª—è '{title}'")
        return cached_links
        
    rutube_links = []
    search_query = f"{title} —Ñ–∏–ª—å–º"
    encoded_query = aiohttp.helpers.quote(search_query)
    url = f"{RUTUBE_API_SEARCH_URL}{encoded_query}"
    logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Rutube API: {url}")
        try:
            async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=7) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                    results = data.get('results', [])
                    logging.info(f"Rutube API: –ø–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    if results:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        for video_item in results[:3]:
                            video_id = video_item.get('id')
                            rutube_title = video_item.get('title', '–í–∏–¥–µ–æ Rutube')
                            
                            if video_id:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ (–Ω–µ –Ω–∞ embed)
                                video_url = f"https://rutube.ru/video/{video_id}/"
                                # Validate URL
                                if not video_url.startswith('http'):
                                    video_url = 'https://rutube.ru/video/' + video_id + '/'
                                
                                # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Rutube:"
                                name = rutube_title[:30] + "..." if len(rutube_title) > 30 else rutube_title
                                rutube_links.append({
                                    "name": name,
                                    "url": video_url
                                })
                                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –Ω–∞ Rutube: {video_url} ({name})")
                            else:
                                logging.warning(f"Rutube item –±–µ–∑ video_id: {video_item}")
                else:
                    logging.error(f"Rutube API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å—Ç–∞—Ç—É—Å: {resp.status}, –æ—Ç–≤–µ—Ç: {await resp.text(errors='ignore')}")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rutube API.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Rutube API: {str(e)}")
    
    if not rutube_links:
        logging.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Rutube API.")
    else:
        # Save to cache if we found results
        save_rutube_to_cache(title, rutube_links)
        
    return rutube_links

async def get_kinopoisk_data(movie_title):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""
    # Check cache first
    cached_data = get_movie_from_cache(movie_title)
    if cached_data is not None:
        logging.info(f"Returning cached movie data for '{movie_title}'")
        return cached_data
    
    # Continue with regular API call if not in cache
    # Initialize with all keys search_movie expects for kinopoisk_data
    # This ensures that if some fields are missing from API, they are None.
    kinopoisk_data_output = {
        "kinopoiskId": None,
        "nameRu": None,
        "year": None,
        "description": None,
        "ratingKinopoisk": None,
        "genres": [],
        "countries": [],
        "filmLength": None,
        "posterUrlPreview": None
    }
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.kinopoisk.dev/v1.4/movie/search?query={aiohttp.helpers.quote(movie_title)}&page=1&limit=1"
            headers = {"X-API-KEY": KINOPOISK_TOKEN}
            logging.debug(f"Requesting Kinopoisk API: {url} with headers {headers}")
            async with session.get(url, headers=headers, timeout=7) as resp: # Increased timeout slightly
                logging.debug(f"Kinopoisk API response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logging.debug(f"Kinopoisk API response data: {data}")
                    if data.get("docs") and len(data["docs"]) > 0:
                        movie = data["docs"][0]
                        
                        kinopoisk_data_output["kinopoiskId"] = movie.get('id')
                        kinopoisk_data_output["nameRu"] = movie.get('name')
                        if not kinopoisk_data_output["nameRu"]: # Fallback to alternativeName
                            kinopoisk_data_output["nameRu"] = movie.get('alternativeName')
                        
                        kinopoisk_data_output["year"] = movie.get('year')
                        kinopoisk_data_output["description"] = movie.get('description')
                        
                        rating_data = movie.get('rating', {})
                        if isinstance(rating_data, dict):
                            kinopoisk_data_output["ratingKinopoisk"] = rating_data.get('kp')
                        
                        api_genres = movie.get('genres', [])
                        if isinstance(api_genres, list):
                            kinopoisk_data_output["genres"] = [{'genre': g.get('name')} for g in api_genres if isinstance(g, dict) and g.get('name')]

                        api_countries = movie.get('countries', [])
                        if isinstance(api_countries, list):
                            kinopoisk_data_output["countries"] = [{'country': c.get('name')} for c in api_countries if isinstance(c, dict) and c.get('name')]
                        
                        kinopoisk_data_output["filmLength"] = movie.get('movieLength')
                        if kinopoisk_data_output["filmLength"] is None:
                            kinopoisk_data_output["filmLength"] = movie.get('filmLength')

                        poster_data = movie.get('poster', {})
                        if isinstance(poster_data, dict):
                            # –ë–µ—Ä–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞
                            poster_url = poster_data.get('url')
                            if poster_url:
                                kinopoisk_data_output["posterUrlPreview"] = poster_url
                                
                            # Log the poster URL for debugging
                            logging.info(f"Poster URL for '{movie_title}': {kinopoisk_data_output['posterUrlPreview']}")
                        
                        # Critical check: if no ID or name, treat as not found.
                        if not kinopoisk_data_output["kinopoiskId"] or not kinopoisk_data_output["nameRu"]:
                            logging.warning(f"Kinopoisk API: Movie found for '{movie_title}' but missing essential id or name. Data: {movie}")
                            return {} # Return empty dict
                        
                        logging.info(f"Successfully fetched Kinopoisk data for '{movie_title}': ID {kinopoisk_data_output['kinopoiskId']}")
                        if kinopoisk_data_output["kinopoiskId"]:
                            save_movie_to_cache(movie_title, kinopoisk_data_output)
                        return kinopoisk_data_output
                    else:
                        logging.info(f"Kinopoisk API: No movie found for query '{movie_title}'.")
                        return {} 
                else:
                    responseText = await resp.text(errors='ignore')
                    logging.error(f"Kinopoisk API request failed for '{movie_title}', status: {resp.status}, response: {responseText}")
                    return {}
    except asyncio.TimeoutError:
        logging.warning(f"Timeout during Kinopoisk API request for '{movie_title}'")
        return {}
    except Exception as e:
        logging.error(f"Unexpected error in get_kinopoisk_data for '{movie_title}': {e}", exc_info=True)
        return {}

# Add a new function to clear cache
async def clear_cache(clear_all=True, clear_posters=False, clear_movie_data=False, clear_rutube=False):
    """
    Clear cache files and directories
    
    Parameters:
    - clear_all: Whether to clear all cache types
    - clear_posters: Whether to clear the poster cache
    - clear_movie_data: Whether to clear the movie data cache
    - clear_rutube: Whether to clear the Rutube links cache
    
    Returns:
    - result_string: A string describing what was cleared
    """
    results = []
    
    # If clear_all is True, set all other flags to True
    if clear_all:
        clear_posters = True
        clear_movie_data = True
        clear_rutube = True
    
    # Clear poster cache
    if clear_posters:
        try:
            poster_count = 0
            if os.path.exists(POSTERS_DIR):
                for filename in os.listdir(POSTERS_DIR):
                    file_path = os.path.join(POSTERS_DIR, filename)
                    try:
                        if os.path.isfile(file_path):
                            os.remove(file_path)
                            poster_count += 1
                    except Exception as e:
                        logging.error(f"Error removing {file_path}: {str(e)}")
            results.append(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–µ—Ä–æ–≤: {poster_count}")
            logging.info(f"Cleared {poster_count} posters from cache")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤: {str(e)}"
            results.append(error_msg)
            logging.error(error_msg)
    
    # Clear movie data cache
    if clear_movie_data:
        try:
            if os.path.exists(MOVIE_DATA_CACHE):
                # Reset to empty dictionary
                with open(MOVIE_DATA_CACHE, 'w', encoding='utf-8') as f:
                    json.dump({}, f)
                results.append("–ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –æ—á–∏—â–µ–Ω")
                logging.info("Cleared movie data cache")
            else:
                results.append("–ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö: {str(e)}"
            results.append(error_msg)
            logging.error(error_msg)
    
    # Clear Rutube links cache
    if clear_rutube:
        try:
            if os.path.exists(RUTUBE_CACHE):
                # Reset to empty dictionary
                with open(RUTUBE_CACHE, 'w', encoding='utf-8') as f:
                    json.dump({}, f)
                results.append("–ö—ç—à —Å—Å—ã–ª–æ–∫ Rutube –æ—á–∏—â–µ–Ω")
                logging.info("Cleared Rutube links cache")
            else:
                results.append("–ö—ç—à —Å—Å—ã–ª–æ–∫ Rutube –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ Rutube: {str(e)}"
            results.append(error_msg)
            logging.error(error_msg)
    
    # Reinitialize cache directories
    init_cache_directories()
    
    if not results:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ"
    
    return "\n".join(results)

# Add command handlers for cache clearing
@dp.message(Command("clear_cache"))
async def cmd_clear_cache(message: Message):
    """Clear all cache"""
    logging.info(f"User {message.from_user.id} requested to clear all cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    
    # Clear the cache
    result = await clear_cache(clear_all=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω\n\n{result}")

@dp.message(Command("clear_posters"))
async def cmd_clear_posters(message: Message):
    """Clear only poster cache"""
    logging.info(f"User {message.from_user.id} requested to clear poster cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤...")
    
    # Clear the poster cache
    result = await clear_cache(clear_all=False, clear_posters=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –ø–æ—Å—Ç–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω\n\n{result}")

@dp.message(Command("clear_movie_data"))
async def cmd_clear_movie_data(message: Message):
    """Clear only movie data cache"""
    logging.info(f"User {message.from_user.id} requested to clear movie data cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö...")
    
    # Clear the movie data cache
    result = await clear_cache(clear_all=False, clear_movie_data=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –æ—á–∏—â–µ–Ω\n\n{result}")

@dp.message(Command("clear_rutube"))
async def cmd_clear_rutube(message: Message):
    """Clear only Rutube links cache"""
    logging.info(f"User {message.from_user.id} requested to clear Rutube links cache")
    
    # Send a "working" message
    wait_msg = await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ Rutube...")
    
    # Clear the Rutube links cache
    result = await clear_cache(clear_all=False, clear_rutube=True)
    
    # Delete the wait message and send the result
    await wait_msg.delete()
    await message.answer(f"üßπ –ö—ç—à —Å—Å—ã–ª–æ–∫ Rutube –æ—á–∏—â–µ–Ω\n\n{result}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, lambda: asyncio.create_task(shutdown()))
    
    # Initialize cache directories
    init_cache_directories()
    
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    await db.init()
    try:
        me = await bot.get_me()
        logging.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç: @{me.username} ({me.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
        sys.exit(1)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

async def shutdown():
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    await bot.session.close()
    sys.exit(0)

if __name__ == '__main__':
    try:
        timeout = aiohttp.ClientTimeout(total=60, connect=10, sock_connect=10, sock_read=10)
    asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)